<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Johan Larsson - r</title>
    <description>Posts categorized as 'r'</description>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.r.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Finding the farthest points in a point cloud</title>
          <description><p>My R package <a href="https://github.com/jolars/qualpalr">qualpalr</a> selects qualitative colors by projecting a bunch of colors (as points) to the three-dimensional DIN99d color space wherein the distance between any pair colors approximate their differences in appearance. The package then tries to choose the <code>n</code> colors so that the minimal pairwise distance among them is maximized, that is, we want the most similar pair of colors to be as dissimilar as possible.</p>
<p>This turns out to be much less trivial that one would suspect, which posts on <a href="http://scicomp.stackexchange.com/questions/20030/selecting-most-scattered-points-from-a-set-of-points">Computational Science</a>, <a href="https://se.mathworks.com/matlabcentral/answers/42622-how-can-i-choose-a-subset-of-k-points-the-farthest-apart">MATLAB Central</a>, <a href="http://stackoverflow.com/questions/27971223/finding-largest-minimum-distance-among-k-objects-in-n-possible-distinct-position">Stack Overflow</a>, and and <a href="http://cs.stackexchange.com/questions/22767/choosing-a-subset-to-maximize-the-minimum-distance-between-points">Computer Science</a> can attest to.</p>
<p>Up til now, qualpalr solved this problem with a greedy approach. If we, for instance, want to find <code>n</code> points we did the following.</p>
<pre><code>M &lt;- Compute a distance matrix of all points in the sample
X &lt;- Select the two most distant points from M
for i = 3:n
    X(i) &lt;- Select point in M that maximize the mindistance to all points in X</code></pre>
<p>In R, this code looked like this (in two dimensions):</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">set.seed</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="c1"># find n points</span><span class="w">
</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">3</span><span class="w">
</span><span class="n">mat</span><span class="w">  </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">runif</span><span class="p">(</span><span class="m">100</span><span class="p">),</span><span class="w"> </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">

</span><span class="n">dmat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.matrix</span><span class="p">(</span><span class="n">stats</span><span class="o">::</span><span class="n">dist</span><span class="p">(</span><span class="n">mat</span><span class="p">))</span><span class="w">
</span><span class="n">ind</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">integer</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w">
</span><span class="n">ind</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.vector</span><span class="p">(</span><span class="n">arrayInd</span><span class="p">(</span><span class="n">which.max</span><span class="p">(</span><span class="n">dmat</span><span class="p">),</span><span class="w"> </span><span class="n">.dim</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">dim</span><span class="p">(</span><span class="n">dmat</span><span class="p">)))</span><span class="w">

</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">3</span><span class="o">:</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">mm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dmat</span><span class="p">[</span><span class="n">ind</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="n">ind</span><span class="p">,</span><span class="w"> </span><span class="n">drop</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">]</span><span class="w">
  </span><span class="n">k</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">which.max</span><span class="p">(</span><span class="n">mm</span><span class="p">[(</span><span class="m">1</span><span class="o">:</span><span class="n">ncol</span><span class="p">(</span><span class="n">mm</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">nrow</span><span class="p">(</span><span class="n">mm</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">max.col</span><span class="p">(</span><span class="n">t</span><span class="p">(</span><span class="o">-</span><span class="n">mm</span><span class="p">))])</span><span class="w">
  </span><span class="n">ind</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="nf">dimnames</span><span class="p">(</span><span class="n">mm</span><span class="p">)[[</span><span class="m">2</span><span class="p">]][</span><span class="n">k</span><span class="p">])</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span><span class="w"> </span><span class="n">asp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">xlab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">ylab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span><span class="w"> </span><span class="n">asp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">xlab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">ylab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">)</span><span class="w">
</span><span class="n">points</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">ind</span><span class="p">,</span><span class="w"> </span><span class="p">],</span><span class="w"> </span><span class="n">pch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">19</span><span class="p">)</span><span class="w">
</span><span class="n">text</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">ind</span><span class="p">,</span><span class="w"> </span><span class="p">],</span><span class="w"> </span><span class="n">adj</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">-1.5</span><span class="p">))</span></code></pre>
</figure>
<figure>
<img src="/figure/posts/2016-10-30-farthest-points/greedy_approach-1.png" alt="" /><figcaption>Numbers note the order the points were picked in.</figcaption>
</figure>
<p>While this greedy procedure is fast and works well for large values of <code>n</code> it is quite inefficient in the example above. It is plain to see that there are other subsets of 3 points that would have a larger minimum distance but because we base our selection on the previous 2 points that were selected to be maximally distant, the algorithm has to pick a suboptimal third point. The minimum distance in our example is 0.7641.</p>
<p>The solution I came up with is based on a solution from Schlomer et al. <span class="citation" data-cites="schlomer_farthest-point_2011">Schlömer, Heck, and Deussen (2011)</span> who devised of an algorithm to partition a sets of points into subsets whilst maximizing the minimal distance. They used <a href="https://en.wikipedia.org/wiki/Delaunay_triangulation">delaunay triangulations</a> but I decided to simply use the distance matrix instead. The algorithm works as follows.</p>
<pre><code>M &lt;- Compute a distance matrix of all points in the sample
S &lt;- Sample n points randomly from M
repeat
    for i = 1:n
        M    &lt;- Add S(i) back into M
        S(i) &lt;- Find point in M\S with max mindistance to any point in S
until M did not change</code></pre>
<p>Iteratively, we put one point from our candidate subset (S) back into the original se (M) and check all distances between the points in S to those in M to find the point with the highest minimum distance. Rinse and repeat until we are only putting back the same points we started the loop with, which always happens. Let’s see how this works on the same data set we used above.</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">r</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sample.int</span><span class="p">(</span><span class="n">nrow</span><span class="p">(</span><span class="n">dmat</span><span class="p">),</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w">

</span><span class="k">repeat</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">r_old</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">r</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">mm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dmat</span><span class="p">[</span><span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="o">-</span><span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="n">drop</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">]</span><span class="w">
    </span><span class="n">k</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">which.max</span><span class="p">(</span><span class="n">mm</span><span class="p">[(</span><span class="m">1</span><span class="o">:</span><span class="n">ncol</span><span class="p">(</span><span class="n">mm</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">nrow</span><span class="p">(</span><span class="n">mm</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">max.col</span><span class="p">(</span><span class="n">t</span><span class="p">(</span><span class="o">-</span><span class="n">mm</span><span class="p">))])</span><span class="w">
    </span><span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="nf">dimnames</span><span class="p">(</span><span class="n">mm</span><span class="p">)[[</span><span class="m">2</span><span class="p">]][</span><span class="n">k</span><span class="p">])</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">identical</span><span class="p">(</span><span class="n">r_old</span><span class="p">,</span><span class="w"> </span><span class="n">r</span><span class="p">))</span><span class="w"> </span><span class="k">break</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span><span class="w"> </span><span class="n">asp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">xlab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">ylab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span><span class="w"> </span><span class="n">asp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">xlab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">ylab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">)</span><span class="w">
</span><span class="n">points</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">r</span><span class="p">,</span><span class="w"> </span><span class="p">],</span><span class="w"> </span><span class="n">pch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">19</span><span class="p">)</span><span class="w">
</span><span class="n">text</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">r</span><span class="p">,</span><span class="w"> </span><span class="p">],</span><span class="w"> </span><span class="n">adj</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">-1.5</span><span class="p">))</span></code></pre>
</figure>
<figure>
<img src="/figure/posts/2016-10-30-farthest-points/new_approach-1.png" alt="" /><figcaption>The new algorithm for picking points.</figcaption>
</figure>
<p>Here, we end up with a minimum distance of 0.862. In qualpalr, this means that we now achieve slightly more distinct colors.</p>
<h2 id="performance">Performance</h2>
<p>The new algorithm is slightly slower than the old, greedy approach and slightly more verbose</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">f_greedy</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">dmat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.matrix</span><span class="p">(</span><span class="n">stats</span><span class="o">::</span><span class="n">dist</span><span class="p">(</span><span class="n">data</span><span class="p">))</span><span class="w">
  </span><span class="n">ind</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">integer</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w">
  </span><span class="n">ind</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.vector</span><span class="p">(</span><span class="n">arrayInd</span><span class="p">(</span><span class="n">which.max</span><span class="p">(</span><span class="n">dmat</span><span class="p">),</span><span class="w"> </span><span class="n">.dim</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">dim</span><span class="p">(</span><span class="n">dmat</span><span class="p">)))</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">3</span><span class="o">:</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">mm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dmat</span><span class="p">[</span><span class="n">ind</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="n">ind</span><span class="p">,</span><span class="w"> </span><span class="n">drop</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">]</span><span class="w">
    </span><span class="n">k</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">which.max</span><span class="p">(</span><span class="n">mm</span><span class="p">[(</span><span class="m">1</span><span class="o">:</span><span class="n">ncol</span><span class="p">(</span><span class="n">mm</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">nrow</span><span class="p">(</span><span class="n">mm</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">max.col</span><span class="p">(</span><span class="n">t</span><span class="p">(</span><span class="o">-</span><span class="n">mm</span><span class="p">))])</span><span class="w">
    </span><span class="n">ind</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="nf">dimnames</span><span class="p">(</span><span class="n">mm</span><span class="p">)[[</span><span class="m">2</span><span class="p">]][</span><span class="n">k</span><span class="p">])</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="n">ind</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">f_new</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">dat</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">dmat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.matrix</span><span class="p">(</span><span class="n">stats</span><span class="o">::</span><span class="n">dist</span><span class="p">(</span><span class="n">data</span><span class="p">))</span><span class="w">
  </span><span class="n">r</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sample.int</span><span class="p">(</span><span class="n">nrow</span><span class="p">(</span><span class="n">dmat</span><span class="p">),</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w">
  </span><span class="k">repeat</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">r_old</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">r</span><span class="w">
    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="n">mm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dmat</span><span class="p">[</span><span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="o">-</span><span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="n">drop</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">]</span><span class="w">
      </span><span class="n">k</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">which.max</span><span class="p">(</span><span class="n">mm</span><span class="p">[(</span><span class="m">1</span><span class="o">:</span><span class="n">ncol</span><span class="p">(</span><span class="n">mm</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">nrow</span><span class="p">(</span><span class="n">mm</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">max.col</span><span class="p">(</span><span class="n">t</span><span class="p">(</span><span class="o">-</span><span class="n">mm</span><span class="p">))])</span><span class="w">
      </span><span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="nf">dimnames</span><span class="p">(</span><span class="n">mm</span><span class="p">)[[</span><span class="m">2</span><span class="p">]][</span><span class="n">k</span><span class="p">])</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">identical</span><span class="p">(</span><span class="n">r_old</span><span class="p">,</span><span class="w"> </span><span class="n">r</span><span class="p">))</span><span class="w"> </span><span class="nf">return</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre>
</figure>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">n</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">5</span><span class="w">
</span><span class="n">data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">runif</span><span class="p">(</span><span class="m">900</span><span class="p">),</span><span class="w"> </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">)</span><span class="w">
</span><span class="n">microbenchmark</span><span class="o">::</span><span class="n">microbenchmark</span><span class="p">(</span><span class="n">f_greedy</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="n">f_new</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="n">times</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1000L</span><span class="p">)</span></code></pre>
</figure>
<figure class="highlight">
<pre><code class="language-text" data-lang="text">## Unit: milliseconds
##               expr   min    lq  mean median    uq    max neval cld
##  f_greedy(data, n) 1.322 1.591 2.361  1.787 2.319  27.62  1000  a 
##     f_new(data, n) 1.600 2.343 3.605  2.724 3.675 120.25  1000   b</code></pre>
</figure>
<p>The newest development version of qualpalr now uses this updated algorithm which has also been generalized and included as a new function in my R package <a href="https://github.com/jolars/euclidr">euclidr</a> called <code>farthest_points</code>.</p>
<h2 class="unnumbered" id="references" class="unnumbered">References</h2>
<div id="refs" class="references hanging-indent" role="doc-bibliography">
<div id="ref-schlomer_farthest-point_2011">
<p>Schlömer, Thomas, Daniel Heck, and Oliver Deussen. 2011. “Farthest-Point Optimized Point Sets with Maximized Minimum Distance.” In, 135. ACM Press. <a href="https://doi.org/10/bpmnsh">https://doi.org/10/bpmnsh</a>.</p>
</div>
</div>
</description>
        <pubDate>Sun, 30 Oct 2016 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/posts/r/farthest-points/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/r/farthest-points/</guid>
      </item>
    
      <item>
        <title>Introducing eulerr</title>
          <description><p><strong>eulerr</strong> is an <a href="https://www.r-project.org">R</a> package that generates area-proportional euler diagrams to display set relationships (intersections, unions, and disjoints) with circles. <a href="https://en.wikipedia.org/wiki/Euler_diagram">Euler diagrams</a> are Venn diagrams without the requirement that all set interactions be present (whether they are empty or not). That is, depending on input, eulerr will sometimes produce Venn diagrams but sometimes not.</p>
<h2 id="background">Background</h2>
<p>R features a number of packages that produce euler and/or venn diagrams; some of the more prominent ones (on CRAN) are</p>
<ul>
<li><a href="https://cran.r-project.org/package=eVenn">eVenn</a>,</li>
<li><a href="https://cran.r-project.org/package=VennDiagram">VennDiagram</a>,</li>
<li><a href="https://cran.r-project.org/package=venn">venn</a>,</li>
<li><a href="https://cran.r-project.org/package=colorfulVennPlot">colorfulVennPlot</a>, and</li>
<li><a href="https://cran.r-project.org/package=venneuler">venneuler</a>.</li>
</ul>
<p>The last of these (venneuler) serves as the primary inspiration for this package, along with the refinements that Ben Fredrickson has presented on his <a href="http://www.benfrederickson.com/">blog</a> and made available in his javascript <a href="https://github.com/benfred/venn.js">venn.js</a>.</p>
<p>venneuler, however, is written in java, preventing R users from browsing the source code (unless they are also literate in java) or contributing. Furthermore, venneuler is known to produce imperfect output for set configurations that have perfect solutions. Consider, for instance, the following example in which the intersection between <code>A</code> and <code>B</code> is unwanted.</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">venneuler</span><span class="p">,</span><span class="w"> </span><span class="n">quietly</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">venn_fit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">venneuler</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="n">A</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">75</span><span class="p">,</span><span class="w"> </span><span class="n">B</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="s2">"A&amp;B"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">venn_fit</span><span class="p">)</span></code></pre>
</figure>
<figure>
<img src="/figure/posts/2016-10-19-introducing-eulerr/venneuler_failure-1.png" alt="" /><figcaption>venneuler plot with unwanted overlap.</figcaption>
</figure>
<h2 id="enter-eulerr">Enter eulerr</h2>
<p>eulerr is based on the improvements to <strong>venneuler</strong> that Ben Fredrickson introcued with <strong>venn.js</strong> but has been coded from scratch, uses different optimizers, and returns the residuals and stress statistic that venneuler features.</p>
<h3 id="input">Input</h3>
<p>Currently, it is possible to provide input to <code>eulerr</code> as either</p>
<ul>
<li>a named numeric vector or</li>
<li>a matrix of logicals with columns representing sets and rows the set relationships for each observation.</li>
</ul>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">eulerr</span><span class="p">)</span><span class="w">

</span><span class="c1"># Input in the form of a named numeric vector</span><span class="w">
</span><span class="n">fit1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">euler</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"A"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">25</span><span class="p">,</span><span class="w"> </span><span class="s2">"B"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="s2">"C"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w">
                </span><span class="s2">"A&amp;B"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="s2">"A&amp;C"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="s2">"B&amp;C"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">,</span><span class="w">
                </span><span class="s2">"A&amp;B&amp;C"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">))</span><span class="w">

</span><span class="c1"># Input as a matrix of logicals</span><span class="w">
</span><span class="n">set.seed</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">mat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w">
  </span><span class="n">cbind</span><span class="p">(</span><span class="w">
    </span><span class="n">A</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sample</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">),</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">replace</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">),</span><span class="w">
    </span><span class="n">B</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sample</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">),</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">replace</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">),</span><span class="w">
    </span><span class="n">C</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sample</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">),</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">replace</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
  </span><span class="p">)</span><span class="w">
</span><span class="n">fit2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">euler</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span></code></pre>
</figure>
<h3 id="fit">Fit</h3>
<p>We inspect our results by printing the eulerr object</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">fit2</span></code></pre>
</figure>
<figure class="highlight">
<pre><code class="language-text" data-lang="text">##       original fitted residuals regionError
## A           13     13         0       0.008
## B            4      4         0       0.002
## C            0      0         0       0.000
## A&amp;B         17     17         0       0.010
## A&amp;C          5      5         0       0.003
## B&amp;C          1      0         1       0.024
## A&amp;B&amp;C        2      2         0       0.001
## 
## diagError: 0.024 
## stress:    0.002</code></pre>
</figure>
<p>or directly access and plot the residuals.</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="c1"># Cleveland dot plot of the residuals</span><span class="w">
</span><span class="n">dotchart</span><span class="p">(</span><span class="n">resid</span><span class="p">(</span><span class="n">fit2</span><span class="p">))</span><span class="w">
</span><span class="n">abline</span><span class="p">(</span><span class="n">v</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">lty</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">)</span></code></pre>
</figure>
<figure>
<img src="/figure/posts/2016-10-19-introducing-eulerr/residual_plot-1.png" alt="" /><figcaption>Residuals for the eulerr fit.</figcaption>
</figure>
<p>This shows us that the <code>A&amp;B&amp;C</code> intersection is somewhat overrepresented in <code>fit2</code>. Given that these residuals are on the scale of the original values, however, the residuals are arguably of little concern.</p>
<p>For an overall measure of the fit of the solution, we use the same stress statistic that Leland Wilkinson presented in his academic paper on venneuler (<span class="citation" data-cites="wilkinson_exact_2012">Wilkinson (2012)</span>), which is given by the sums of squared residuals divided by the total sums of squares: <span class="math display">\[\frac{\sum_{i=1}^n (f_i - y_i)^2}{\sum_{i=1}^n (y_i - \bar{y})^2}\]</span></p>
<p>We fetch it from the <code>stress</code> attribute of the <code>eulerr</code> object.</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">fit2</span><span class="o">$</span><span class="n">stress</span></code></pre>
</figure>
<figure class="highlight">
<pre><code class="language-text" data-lang="text">## [1] 0.001984</code></pre>
</figure>
<p>We can now be confident that eulerr provides a reasonable representation of our input. Were it otherwise, we would do best to stop here and look for another way to visualize our data. (I suggest the excellent <a href="https://cran.r-project.org/package=UpSetR">UpSetR</a> package.)</p>
<h3 id="plotting">Plotting</h3>
<p>No we get to the fun part: plotting our diagram. This is easy, as well as highly customizable, with eulerr.</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">plot</span><span class="p">(</span><span class="n">fit2</span><span class="p">)</span><span class="w">

</span><span class="c1"># Change fill colors, border type (remove) and fontface.</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">fit2</span><span class="p">,</span><span class="w">
     </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"dodgerblue4"</span><span class="p">,</span><span class="w"> </span><span class="s2">"darkgoldenrod1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cornsilk4"</span><span class="p">)),</span><span class="w">
     </span><span class="n">edges</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">lty</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">),</span><span class="w">
     </span><span class="n">labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">font</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">))</span></code></pre>
</figure>
<p><img src="/figure/posts/2016-10-19-introducing-eulerr/eulerr_plot-1.png" alt="eulerr plots can be modified in every possible way." /><img src="/figure/posts/2016-10-19-introducing-eulerr/eulerr_plot-2.png" alt="eulerr plots can be modified in every possible way." /></p>
<p>eulerr’s default color palette is taken from <a href="https://cran.r-project.org/package=qualpalr">qualpalr</a> – another package that I have developed – which uses color difference algorithms to generate distinct qualitative color palettes.</p>
<h2 id="details">Details</h2>
<p>Details of the implementation will be left for a future vignette but almost completely resemble the approach documented <a href="http://www.benfrederickson.com/better-venn-diagrams/">here</a>.</p>
<h2 id="thanks">Thanks</h2>
<p>eulerr would not be possible without Ben Fredrickson’s work on <a href="http://www.benfrederickson.com">venn.js</a> or Leland Wilkinson’s <a href="https://cran.r-project.org/package=venneuler">venneuler</a>.</p>
<h2 class="unnumbered" id="references" class="unnumbered">References</h2>
<div id="refs" class="references hanging-indent" role="doc-bibliography">
<div id="ref-wilkinson_exact_2012">
<p>Wilkinson, L. 2012. “Exact and Approximate Area-Proportional Circular Venn and Euler Diagrams.” <em>IEEE Transactions on Visualization and Computer Graphics</em> 18 (2): 321–31. <a href="https://doi.org/10.1109/TVCG.2011.56">https://doi.org/10.1109/TVCG.2011.56</a>.</p>
</div>
</div>
</description>
        <pubDate>Wed, 19 Oct 2016 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/posts/r/introducing-eulerr/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/r/introducing-eulerr/</guid>
      </item>
    
      <item>
        <title>Introducing qualpalr</title>
          <description><p>With the advent of <a href="http://colorbrewer2.org/">colorbrewer</a> there now exists good options to generate color palettes for sequential, diverging, and qualitative data. In R, these palettes can be accessed via the popular <a href="https://cran.r-project.org/package=RColorBrewer">RColorBrewer</a> package. Those palettes, however, are limited to a fixed number of colors. This isn’t much of a problem for sequential of diverging data since we can interpolate colors to any range we desire:</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">pal</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">RColorBrewer</span><span class="o">::</span><span class="n">brewer.pal</span><span class="p">(</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="s2">"PuBuGn"</span><span class="p">)</span><span class="w">
</span><span class="n">color_ramp</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorRampPalette</span><span class="p">(</span><span class="n">pal</span><span class="p">,</span><span class="w"> </span><span class="n">space</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Lab"</span><span class="p">)</span></code></pre>
</figure>
<p>There is not, however, an analogue for qualitative color palettes that will get you beyond the limits of 8–12 colors of colorbrewer’s qualitative color palettes.</p>
<p>There is also no customization in colorbrewer. Other R packages, such as <a href="https://cran.r-project.org/package=colorspace">colorspace</a> offer this, but they are primarily adapted to sequential and diverging data – not qualitative data.</p>
<p>This is where qualpalr comes in. qualpalr provides the user with a convenient way of generating distinct qualitative color palettes, primarily for use in R graphics. Given <code>n</code> (the number of colors to generate), along with a subset in the <a href="https://en.wikipedia.org/wiki/HSL_and_HSV">hsl color space</a> (a cylindrical representation of the RGB color space) <code>qualpalr</code> attempts to find the <code>n</code> colors in the provided color subspace that <em>maximize the smallest pairwise color difference</em>. This is done by projecting the color subset from the HSL color space to the DIN99d space. DIN99d is (approximately) perceptually uniform, that is, the euclidean distance between two colors in the space is proportional to their perceived difference.</p>
<h2 id="examples">Examples</h2>
<p><code>qualpalr</code> relies on one basic function, <code>qualpal()</code>, which takes as its input <code>n</code> (the number of colors to generate) and <code>colorspace</code>, which can be either</p>
<ul>
<li>a list of numeric vectors <code>h</code> (hue from -360 to 360), <code>s</code> (saturation from 0 to 1), and <code>l</code> (lightness from 0 to 1), all of length 2, specifying a min and max.</li>
<li>a character vector specifying one of the predefined color subspaces, which at the time of writing are <em>pretty</em>, <em>pretty_dark</em>, <em>rainbow</em>, and <em>pastels</em>.</li>
</ul>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">qualpalr</span><span class="p">)</span><span class="w">
</span><span class="n">pal</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">qualpal</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">h</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">360</span><span class="p">),</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0.4</span><span class="p">,</span><span class="w"> </span><span class="m">0.6</span><span class="p">),</span><span class="w"> </span><span class="n">l</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0.5</span><span class="p">,</span><span class="w"> </span><span class="m">0.85</span><span class="p">)))</span><span class="w">

</span><span class="c1"># Adapt the color space to deuteranopia</span><span class="w">
</span><span class="n">pal</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">qualpal</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="n">colorspace</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"pretty"</span><span class="p">,</span><span class="w"> </span><span class="n">cvd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"deutan"</span><span class="p">)</span></code></pre>
</figure>
<p>The resulting object, <code>pal</code>, is a list with several color tables and a distance matrix based on the din99d color difference formula.</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">pal</span></code></pre>
</figure>
<figure class="highlight">
<pre><code class="language-text" data-lang="text">## ---------------------------------------- 
## Colors in the HSL color space 
## 
##         Hue Saturation Lightness
## #73CA6F 117       0.46      0.61
## #D37DAD 327       0.50      0.66
## #C6DBE8 203       0.42      0.84
## #6C7DCC 229       0.48      0.61
## #D0A373  31       0.50      0.63
## 
##  ---------------------------------------- 
## DIN99d color difference distance matrix 
## 
##         #73CA6F #D37DAD #C6DBE8 #6C7DCC
## #D37DAD      28                        
## #C6DBE8      19      21                
## #6C7DCC      27      19      19        
## #D0A373      19      18      20      25</code></pre>
</figure>
<p>Methods for <code>pairs</code> and <code>plot</code> have been written for <code>qualpal</code> objects to help visualize the results.</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="c1"># Multidimensional scaling plot</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">pal</span><span class="p">)</span><span class="w">

</span><span class="c1"># Pairs plot in the din99d color space</span><span class="w">
</span><span class="n">pairs</span><span class="p">(</span><span class="n">pal</span><span class="p">,</span><span class="w"> </span><span class="n">colorspace</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"DIN99d"</span><span class="p">)</span></code></pre>
</figure>
<p><img src="/figure/posts/2016-10-15-introducing-qualpalr/unnamed-chunk-2-1.png" alt="plot of chunk unnamed-chunk-2" /><img src="/figure/posts/2016-10-15-introducing-qualpalr/unnamed-chunk-2-2.png" alt="plot of chunk unnamed-chunk-2" /></p>
<p>The colors are normally used in R by fetching the <code>hex</code> attribute of the palette.</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">maps</span><span class="p">)</span><span class="w">
</span><span class="n">map</span><span class="p">(</span><span class="s2">"france"</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pal</span><span class="o">$</span><span class="n">hex</span><span class="p">,</span><span class="w"> </span><span class="n">mar</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">))</span></code></pre>
</figure>
<figure>
<img src="/figure/posts/2016-10-15-introducing-qualpalr/map-1.png" alt="" /><figcaption>plot of chunk map</figcaption>
</figure>
<h2 id="details">Details</h2>
<p><code>qualpal</code> begins by generating a point cloud out of the HSL color subspace provided by the user, using a quasi-random torus sequence from <a href="https://cran.r-project.org/package=randtoolbox">randtoolbox</a>. Here is the color subset in HSL with settings <code>h = c(-200, 120), s = c(0.3, 0.8), l = c(0.4, 0.9)</code>.</p>
<figure class="highlight">
<pre><code class="language-text" data-lang="text">## Loading required namespace: rmarkdown</code></pre>
</figure>
<figure class="highlight">
<pre><code class="language-text" data-lang="text">## TypeError: Attempting to change the setter of an unconfigurable property.
## TypeError: Attempting to change the setter of an unconfigurable property.</code></pre>
</figure>
<figure>
<img src="/figure/posts/2016-10-15-introducing-qualpalr/details_input-1.png" alt="" /><figcaption>plot of chunk details_input</figcaption>
</figure>
<p>The function then proceeds by projecting these colors into the sRGB space.</p>
<figure class="highlight">
<pre><code class="language-text" data-lang="text">## TypeError: Attempting to change the setter of an unconfigurable property.
## TypeError: Attempting to change the setter of an unconfigurable property.</code></pre>
</figure>
<figure>
<img src="/figure/posts/2016-10-15-introducing-qualpalr/RGB_space-1.png" alt="" /><figcaption>plot of chunk RGB_space</figcaption>
</figure>
<p>It then continues by projecting the colors, first into the XYZ space, then CIELab (not shown here), and then finally the DIN99d space.</p>
<figure class="highlight">
<pre><code class="language-text" data-lang="text">## TypeError: Attempting to change the setter of an unconfigurable property.
## TypeError: Attempting to change the setter of an unconfigurable property.</code></pre>
</figure>
<figure>
<img src="/figure/posts/2016-10-15-introducing-qualpalr/DIN_space-1.png" alt="" /><figcaption>plot of chunk DIN_space</figcaption>
</figure>
<p>The DIN99d color space <span class="citation" data-cites="cui_uniform_2002">(Cui et al. 2002)</span> is a euclidean, perceptually uniform color space. This means that the difference between two colors is equal to the euclidean distance between them. We take advantage of this by computing a distance matrix on all the colors in the subset, finding their pairwise color differences. We then apply a power transformation <span class="citation" data-cites="huang_power_2015">(Huang et al. 2015)</span> to fine tune these differences.</p>
<p>To select the <code>n</code> colors that the user wanted, we proceed greedily: first, we find the two most distant points, then we find the third point that maximizes the minimum distance to the previously selected points. This is repeated until <code>n</code> points are selected. These points are then returned to the user; below is an example using <code>n = 5.</code></p>
<figure class="highlight">
<pre><code class="language-text" data-lang="text">## TypeError: Attempting to change the setter of an unconfigurable property.
## TypeError: Attempting to change the setter of an unconfigurable property.</code></pre>
</figure>
<figure>
<img src="/figure/posts/2016-10-15-introducing-qualpalr/selected_points-1.png" alt="" /><figcaption>plot of chunk selected_points</figcaption>
</figure>
<h3 id="color-specifications">Color specifications</h3>
<p>At the time of writing, qualpalr only works in the sRGB color space with the CIE Standard Illuminant D65 reference white.</p>
<h2 id="future-directions">Future directions</h2>
<p>The greedy search to find distinct colors is crude. Particularly when searching for few colors, the greedy algorithm will lead to sub-optimal results. Other solutions to finding points that maximize the smallest pairwise distance among them are welcome.</p>
<h2 id="thanks">Thanks</h2>
<p><a href="http://www.brucelindbloom.com/">Bruce Lindbloom’s webpage</a> has been instrumental in making qualpalr. Also thanks to <a href="http://tools.medialab.sciences-po.fr/iwanthue/">i want hue</a>, which inspired me to make qualpalr.</p>
<h2 class="unnumbered" id="references" class="unnumbered">References</h2>
<div id="refs" class="references hanging-indent" role="doc-bibliography">
<div id="ref-cui_uniform_2002">
<p>Cui, G., M. R. Luo, B. Rigg, G. Roesler, and K. Witt. 2002. “Uniform Colour Spaces Based on the DIN99 Colour-Difference Formula.” <em>Color Res. Appl.</em> 27 (4): 282–90. <a href="https://doi.org/10/cz7764">https://doi.org/10/cz7764</a>.</p>
</div>
<div id="ref-huang_power_2015">
<p>Huang, Min, Guihua Cui, Manuel Melgosa, Manuel Sánchez-Marañón, Changjun Li, M. Ronnier Luo, and Haoxue Liu. 2015. “Power Functions Improving the Performance of Color-Difference Formulas.” <em>Optics Express</em> 23 (1): 597. <a href="https://doi.org/10/gcsk6f">https://doi.org/10/gcsk6f</a>.</p>
</div>
</div>
</description>
        <pubDate>Sat, 15 Oct 2016 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/posts/r/introducing-qualpalr/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/r/introducing-qualpalr/</guid>
      </item>
    
  </channel>
</rss>