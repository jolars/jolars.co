I"":<p><strong>eulerr</strong> is an <a href="https://www.r-project.org">R</a> package that generates area-proportional euler diagrams to display set relationships (intersections, unions, and disjoints) with circles. <a href="https://en.wikipedia.org/wiki/Euler_diagram">Euler diagrams</a> are Venn diagrams without the requirement that all set interactions be present (whether they are empty or not). That is, depending on input, eulerr will sometimes produce Venn diagrams but sometimes not.</p>
<h2 id="background">Background</h2>
<p>R features a number of packages that produce euler and/or venn diagrams; some of the more prominent ones (on CRAN) are</p>
<ul>
<li><a href="https://cran.r-project.org/package=eVenn">eVenn</a>,</li>
<li><a href="https://cran.r-project.org/package=VennDiagram">VennDiagram</a>,</li>
<li><a href="https://cran.r-project.org/package=venn">venn</a>,</li>
<li><a href="https://cran.r-project.org/package=colorfulVennPlot">colorfulVennPlot</a>, and</li>
<li><a href="https://cran.r-project.org/package=venneuler">venneuler</a>.</li>
</ul>
<p>The last of these (venneuler) serves as the primary inspiration for this package, along with the refinements that Ben Fredrickson has presented on his <a href="http://www.benfrederickson.com/">blog</a> and made available in his javascript <a href="https://github.com/benfred/venn.js">venn.js</a>.</p>
<p>venneuler, however, is written in java, preventing R users from browsing the source code (unless they are also literate in java) or contributing. Furthermore, venneuler is known to produce imperfect output for set configurations that have perfect solutions. Consider, for instance, the following example in which the intersection between <code>A</code> and <code>B</code> is unwanted.</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">venneuler</span><span class="p">,</span><span class="w"> </span><span class="n">quietly</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">venn_fit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">venneuler</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="n">A</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">75</span><span class="p">,</span><span class="w"> </span><span class="n">B</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="s2">"A&amp;B"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">venn_fit</span><span class="p">)</span></code></pre>
</figure>
<figure>
<img src="/figure/posts/2016-10-19-introducing-eulerr/venneuler_failure-1.png" alt="" /><figcaption>venneuler plot with unwanted overlap.</figcaption>
</figure>
<h2 id="enter-eulerr">Enter eulerr</h2>
<p>eulerr is based on the improvements to <strong>venneuler</strong> that Ben Fredrickson introcued with <strong>venn.js</strong> but has been coded from scratch, uses different optimizers, and returns the residuals and stress statistic that venneuler features.</p>
<h3 id="input">Input</h3>
<p>Currently, it is possible to provide input to <code>eulerr</code> as either</p>
<ul>
<li>a named numeric vector or</li>
<li>a matrix of logicals with columns representing sets and rows the set relationships for each observation.</li>
</ul>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">eulerr</span><span class="p">)</span><span class="w">

</span><span class="c1"># Input in the form of a named numeric vector</span><span class="w">
</span><span class="n">fit1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">euler</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"A"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">25</span><span class="p">,</span><span class="w"> </span><span class="s2">"B"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="s2">"C"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w">
                </span><span class="s2">"A&amp;B"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="s2">"A&amp;C"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="s2">"B&amp;C"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">,</span><span class="w">
                </span><span class="s2">"A&amp;B&amp;C"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">))</span><span class="w">

</span><span class="c1"># Input as a matrix of logicals</span><span class="w">
</span><span class="n">set.seed</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">mat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w">
  </span><span class="n">cbind</span><span class="p">(</span><span class="w">
    </span><span class="n">A</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sample</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">),</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">replace</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">),</span><span class="w">
    </span><span class="n">B</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sample</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">),</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">replace</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">),</span><span class="w">
    </span><span class="n">C</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sample</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">),</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">replace</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
  </span><span class="p">)</span><span class="w">
</span><span class="n">fit2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">euler</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span></code></pre>
</figure>
<h3 id="fit">Fit</h3>
<p>We inspect our results by printing the eulerr object</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">fit2</span></code></pre>
</figure>
<figure class="highlight">
<pre><code class="language-text" data-lang="text">##       original fitted residuals regionError
## A           13     13         0       0.008
## B            4      4         0       0.002
## C            0      0         0       0.000
## A&amp;B         17     17         0       0.010
## A&amp;C          5      5         0       0.003
## B&amp;C          1      0         1       0.024
## A&amp;B&amp;C        2      2         0       0.001
## 
## diagError: 0.024 
## stress:    0.002</code></pre>
</figure>
<p>or directly access and plot the residuals.</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="c1"># Cleveland dot plot of the residuals</span><span class="w">
</span><span class="n">dotchart</span><span class="p">(</span><span class="n">resid</span><span class="p">(</span><span class="n">fit2</span><span class="p">))</span><span class="w">
</span><span class="n">abline</span><span class="p">(</span><span class="n">v</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">lty</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">)</span></code></pre>
</figure>
<figure>
<img src="/figure/posts/2016-10-19-introducing-eulerr/residual_plot-1.png" alt="" /><figcaption>Residuals for the eulerr fit.</figcaption>
</figure>
<p>This shows us that the <code>A&amp;B&amp;C</code> intersection is somewhat overrepresented in <code>fit2</code>. Given that these residuals are on the scale of the original values, however, the residuals are arguably of little concern.</p>
<p>For an overall measure of the fit of the solution, we use the same stress statistic that Leland Wilkinson presented in his academic paper on venneuler (<span class="citation" data-cites="wilkinson_exact_2012">Wilkinson (2012)</span>), which is given by the sums of squared residuals divided by the total sums of squares: <span class="math display">\[\frac{\sum_{i=1}^n (f_i - y_i)^2}{\sum_{i=1}^n (y_i - \bar{y})^2}\]</span></p>
<p>We fetch it from the <code>stress</code> attribute of the <code>eulerr</code> object.</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">fit2</span><span class="o">$</span><span class="n">stress</span></code></pre>
</figure>
<figure class="highlight">
<pre><code class="language-text" data-lang="text">## [1] 0.001984</code></pre>
</figure>
<p>We can now be confident that eulerr provides a reasonable representation of our input. Were it otherwise, we would do best to stop here and look for another way to visualize our data. (I suggest the excellent <a href="https://cran.r-project.org/package=UpSetR">UpSetR</a> package.)</p>
<h3 id="plotting">Plotting</h3>
<p>No we get to the fun part: plotting our diagram. This is easy, as well as highly customizable, with eulerr.</p>
<figure class="highlight">
<pre><code class="language-r" data-lang="r"><span class="n">plot</span><span class="p">(</span><span class="n">fit2</span><span class="p">)</span><span class="w">

</span><span class="c1"># Change fill colors, border type (remove) and fontface.</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">fit2</span><span class="p">,</span><span class="w">
     </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"dodgerblue4"</span><span class="p">,</span><span class="w"> </span><span class="s2">"darkgoldenrod1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cornsilk4"</span><span class="p">)),</span><span class="w">
     </span><span class="n">edges</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">lty</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">),</span><span class="w">
     </span><span class="n">labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">font</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">))</span></code></pre>
</figure>
<p><img src="/figure/posts/2016-10-19-introducing-eulerr/eulerr_plot-1.png" alt="eulerr plots can be modified in every possible way." /><img src="/figure/posts/2016-10-19-introducing-eulerr/eulerr_plot-2.png" alt="eulerr plots can be modified in every possible way." /></p>
<p>eulerr’s default color palette is taken from <a href="https://cran.r-project.org/package=qualpalr">qualpalr</a> – another package that I have developed – which uses color difference algorithms to generate distinct qualitative color palettes.</p>
<h2 id="details">Details</h2>
<p>Details of the implementation will be left for a future vignette but almost completely resemble the approach documented <a href="http://www.benfrederickson.com/better-venn-diagrams/">here</a>.</p>
<h2 id="thanks">Thanks</h2>
<p>eulerr would not be possible without Ben Fredrickson’s work on <a href="http://www.benfrederickson.com">venn.js</a> or Leland Wilkinson’s <a href="https://cran.r-project.org/package=venneuler">venneuler</a>.</p>
<h2 class="unnumbered" id="references" class="unnumbered">References</h2>
<div id="refs" class="references hanging-indent" role="doc-bibliography">
<div id="ref-wilkinson_exact_2012">
<p>Wilkinson, L. 2012. “Exact and Approximate Area-Proportional Circular Venn and Euler Diagrams.” <em>IEEE Transactions on Visualization and Computer Graphics</em> 18 (2): 321–31. <a href="https://doi.org/10.1109/TVCG.2011.56">https://doi.org/10.1109/TVCG.2011.56</a>.</p>
</div>
</div>
:ET