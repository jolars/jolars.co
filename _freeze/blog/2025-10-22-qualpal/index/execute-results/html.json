{
  "hash": "bdfc808b88b5a7ce30ac249262f575d0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Qualpal\"\nauthor: Johan Larsson\ndate: 2025-10-22\ndescription: |\n  My pet project Qualpal is now a stand-alone C++\n  library as well as web app and was just published\n  in the Journal of Open Source Software!\ncategories:\n  - r\n  - c++\n  - color\n  - research\n  - data visualization\nreference-location: margin\nimage: images/image.png\ntitle-block-banner: images/banner.png\ntitle-block-banner-color: white\n---\n\n## Qualpal(r)\n\nIt is now *nine* years [since I first\nblogged](/blog/2016-10-15-introducing-qualpalr/index.qmd) about my pet project\nQualpal (at that point called *qualpalr*), which is an R package for generating\nqualitative color palettes for data visualization in R. It was motivated by the\nfact that almost all color palettes were designed for a fixed number of\ncategories and therefore must be suboptimal for other numbers of categories.\n\nAt the time, there were only a couple of other alternatives\navailable and out of these I only knew about\n[iWantHue](http://tools.medialab.sciences-po.fr/iwanthue/),\nwhich is a web app that generates these kinds of color palettes.\nAnd while iWantHue is great and I think has raised the issue\nof generating these palettes to more prominence, I felt\nthat there were opportunities to improve upon it, which\nis why Qualpal was born.\n\nThe major innovations of Qualpal were \n\n1. a new algorithm for selecting colors,\n2. an improved metric for computing the distances between colors, \n3. adaptation to color vision deficiencies, and\n4. a C++ backend that made it fast enough to be used interactively and\n   generate palettes from a large input set of colors.\n\nAnother, but perhaps obvious, addition was that Qualpal\nwas accessible directly from R, which is where I (at least at the time)\ndid most of my work. At the time, it was the first package in R \nto provide this type of automatic qualitative palette generation.\n\nI have made little progress on the package until the start of this year when I\ndecided that it was time to make the investment to turn Qualpal into a more\nwidely accessible tool. I had the following ideas in mind.\n\n1. Transform the entire codebase into C++, not just the core algorithm,\n   in order to make it easier to create bindings in other languages, such\n   as Python and Julia.\n2. Improve the feature set of the package. \n3. Create a CLI application.\n4. Create a web app, without having to rely on Shiny.\n5. Support supplying a known palette name as input to Qualpal,\n   so that users could pick a subset of colors from a given palette.\n6. Allow adaptation to any kind of color vision deficiency,\n   not just a single dichromacy type.\n7. Allow users to _extend_ a fixed color palette with additional colors,\n   in order to, for instance, extend Tableau's 10-color palette to a size\n   of 12 colors.\n\n## The New C++ Library\n\nAll of the above has now been implemented. I've decoupled the C++ parts of\nqualpalr into a separate library called Qualpal, which lives [in its own\nrepository on GitHub](https://github.com/jolars/qualpal).\n\nThe new C++ library is designed to be lean and carries no other dependencies\nthan the C++ standard library, although there is support for multi-threading\nvia OpenMP (if available). \n\nThe functionality of the package is mostly concentrated in the `Qualpal` class,\nwhich uses a builder-type interface to customize palette generation. Here's an\nexample, where we construct a five-color palette from part of the\nhue-saturation-lightness (HSL) color space as input.\n\n```cpp\n#include <qualpal.h>\n\nusing namespace qualpal;\n\nQualpal qp;\nqp.setInputColorspace({ -170, 60 }, { 0, 0.7 }, { 0.2, 0.8 });\nauto colorspace_pal = qp.generate(5);\n```\n\n![Five colors from the HSL color space](images/cpp-hsl.png)\n\nIn the next example, we change to using one of the\nbuilt-in color palettes, in this case *Set2* from \n*ColorBrewer* [@harrower2003] as input, and\nadapting the color palette to the color vision deficiency\ntype deuteranomaly of severity 0.7 (70%).\n\n```cpp\nqp.setInputPalette(\"ColorBrewer:Set2\").setCvd({ { \"deutan\", 0.7 } });\nauto cvd_pal = qp.generate(4);\n```\n\n![Four colors from the ColorBrewer Set2 palette with\ndeuteranomaly adaptation](images/cpp-deutan.png)\n\nExtensive documentation, including a complete API reference, is available at\n[jolars.github.io/qualpal](https://jolars.github.io/qualpal/).\n\n## The R Package (qualpalr)\n\nThe R package, qualpalr, now uses the C++ library as a backend, and new\nreleases of the C++ library are semi-automatically integrated into the R\npackage. Only the R-specific parts remain in the qualpalr package,\nwhich means that development is now focused on the C++ library directly.\n\nThe main major change of the package is a switch in the\ncharacter method of the main function of the package, `qualpal()`,\nwhich now assumes that the second argument is the name of a\nbuilt-in palette. But backwards compatibility with the old\nbehavior^[Where the argument defined a subspace of the \nHSL color space.] is maintained by selectively handling the \nprevious set of allowed input.\n\nIn the following example, we generate a 4-color palette\nby picking colors from Vermeer's *Girl with a Pearl Earring*.\nThis example also showcases a new feature that allows users\nto optimize the palette against a given background color\n(in this case white).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(qualpalr)\npal <- qualpal(4, \"Vermeer:PearlEarring\", bg = \"white\")\npal$hex\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"#80a0c7\" \"#100f14\" \"#a65141\" \"#b1934a\"\n```\n\n\n:::\n:::\n\n\nThe default plot method shows a multi-dimensional scaling (MDS)\nplot of the colors in the color difference metric space,\nwhich gives an idea of how well-separated the colors are.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(pal)\n```\n\n::: {.cell-output-display}\n![A multi-dimensional scaling (MDS) plot of colors in the color difference metric space.](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n### New Vignette\n\nAnother addition to the qualpalr package, which is relevant\nirrespective of how you choose to use Qualpal, is a new\n[vignette on comparisons to alternatives](https://jolars.github.io/qualpalr/articles/comparisons).\nSo, in case you are interested in knowing how Qualpal compares to\nother alternatives, such as [palettailor](https://www.yunhaiwang.net/infoVis2020/palettailor/color-palette-generation.html) [@lu2021],\n[Colorgorical](https://gramaz.io/colorgorical/) [@gramazio2016],\nthe aforementioned [iWantHue](https://medialab.github.io/iwanthue/),\nor glasbey [@mcinnes2025], please check it out. As you might guess,\nQualpal performs very well in these comparisons.\n\n## The CLI Tool\n\nAs a result of refactoring the package into a pure C++ library, it was also\nstraightforward to create a command-line interface (CLI) tool for Qualpal,\nrelying on the excellent [CLI11 library](https://github.com/CLIUtils/CLI11).\nThis CLI tool is only available from source as of now, but I hope it will\nbe packaged for various Linux distributions in the future.\n\nHere's an example of generating a 5-color palette from the HSL colorspace:\n\n```sh\nqualpal -n 5 -i colorspace \"0:360\" \"0.4:0.8\" \"0.3:0.7\"\n```\n\n![A palette of five colors generated from input colors as a subspace of the HSL\ncolorspace.](images/cli-example.png)\n\nPlease see the instructions in the\n[README](https://github.com/jolars/qualpal/blob/main/README.md) for how to\nbuild and use the CLI tool.\n\n## The Web App\n\nOne of the major motivations for refactoring Qualpal into a C++ library\nwas to make it possible to serve it as a static web app by compiling\nthe C++ code to WebAssembly (WASM). Although I love\nhow easy it is to turn R code into web apps using Shiny,\nI have always been bothered by the hoops you have to jump through\nto deploy and manage Shiny apps, whereas the new Qualpal web app\nis hosted on GitHub pages as a static site and is served\ndirectly upon successful builds from GitHub Actions.\n\nRunning a server instance is also not free, so hosting\nthis as a static web app means significant cost savings and\nautomatically scales to any number of users.\n\n\n![A screenshot of the Qualpal web app](images/web-app.png)\n\n## JOSS Publication\n\nFinally, I am happy to announce that Qualpal was just published in the Journal\nof Open Source Software (JOSS)! [@larsson2025c]\nI have for a long time been interested in submitting something to JOSS,\nwhich to me seems to have a great model for papers about software.\n\nFirst, I think the reviewer system, which is entirely based around GitHub\nissues, is natural for a journal about software, since much software\nanyway is located in a public repository, and issues can be cross-referenced\nseamlessly. It is also completely transparent.\nFinally, I like the fact that papers are short, motivated by the fact that\nthe software's documentation should serve as the source of information\nabout the software, rather than an academic paper (which is fixed).\n\n## New Color Difference Metric\n\nAnother change that was made as part of the recent work on Qualpal was the\nintroduction of other color difference metric. In particular, Qualpal now\nsupports the [CIEDE2000\nmetric](https://en.wikipedia.org/wiki/Color_difference#CIEDE2000)\n[@sharma2005], which is the current standard set by the CIE organization for\ncomputing differences between colors. Qualpal previously used the DIN99d metric\n[@cui2002], which is computationally appealing since, once the colors are\nconverted into the DIN99d space, the color metric formula is simply Euclidean\ndistance. But the tradeoff is that DIN99d is not as perceptually accurate,\nand I therefore decided o switch the default to CIEDE2000.\n\nThe result is that the palettes are now more distinct than before,\nat the cost of an increase in computation time. For most practical\npurposes, however, the difference in speed is negligible and\nQualpal is still fast enough for this not to be even noticeable.\n\n## Roadmap\n\nComing back to the start of this post and the motivation for refactoring\nQualpal as a stand-alone C++ library, this change means that it is now\neasier to create new bindings for Qualpal. The most obvious next step\nis therefore to create a Python package that wraps around Qualpal.\nDoing so should be quite straightforward and I will eventually do this myself,\nunless someone gets there first!\n\nI am also happy for any kind of feedback regarding Qualpal, so\nplease check out the [GitHub repository](https://github.com/jolars/qualpal) for\nthe project, where you can [file issues](https://github.com/jolars/qualpal/issues)\nor [open up discussions](https://github.com/jolars/qualpal/discussions) should\nyou have any ideas on how the project could be improved or if you\nwould like to contribute directly, which would be\nvery much appreciated.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}