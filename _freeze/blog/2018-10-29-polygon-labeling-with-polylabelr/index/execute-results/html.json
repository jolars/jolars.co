{
  "hash": "87c6578923d3a11b82da20f3b0b808c9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Polygon Labeling with polylabelr\nauthor: Johan Larsson\ndate: \"2018-10-29\"\ndate-modified: \"2024-05-25\"\ndescription: A new package polylabelr can be used find visual centers of\n  polygons and label Euler diagrams.\ncategories:\n  - r\n  - geometry\n  - polylabelr\nimage: polylabelr.png\nbibliography: bibliography.bib\n---\n\n\n\n\n## Labeling Euler diagram overlaps\n\nThe purpose of my R package [eulerr](https://github.com/jolars/eulerr)\nis to fit and *visualize* Euler diagrams. Besides the various intricacies \ninvolved in fitting the diagrams, there are many interesting\nproblems involved in their visualization. One of these is the labeling of the \noverlaps.\n\nNaturally, simply positioning the labels at the shapes' centers\nfails more often than not. Nevertheless, this stategy is employed by\n**venneuler**, for instance, and the plots usually demand\nmanual tuning.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# an example set combination\ns <- c(\n  \"SE\" = 13,\n  \"Treat\" = 28,\n  \"Anti-CCP\" = 101,\n  \"DAS28\" = 91,\n  \"SE&Treat\" = 1,\n  \"SE&DAS28\" = 14,\n  \"Treat&Anti-CCP\" = 6,\n  \"SE&Anti-CCP&DAS28\" = 1\n)\n\nlibrary(venneuler, quietly = TRUE)\nfit_venneuler <- venneuler(s)\nplot(fit_venneuler)\n```\n\n::: {.cell-output-display}\n![A plot from venneuler with suboptimal label placements.](index_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=336}\n:::\n:::\n\n\nUp til now, I solved this in **eulerr** by, for each overlap,\nfilling one of the involved shapes (circles or ellipses) with points\nand then numerically optimizing the location of the point using a\nNelder--Mead optimizer. However, given that the solution to\nfinding the distance between a point and an ellipse---at least one that\nis rotated---itself requires a numerical solution [@eberly2013], this procedure\nturned out to be quite inefficient.\n\n## The promise of polygons\n\nR has powerful functionality for plotting in general, but lacks \ncapabilities for drawing ellipses using curves. High-resolution \npolygons are thankfully a readily available remedy for this and have\nsince several version back been used also in **eulerr**. \n\nThe upside of using polygons, however, are that they are usually\nmuch easier, even if sometimes inefficient,\nto work with. For instance, they make constructing separate shapes\nfor each overlap a breeze using the polyclip package [@johnson2018].\n\nAnd because basically all shapes in digital maps are polygons,\nthere happens to exist a multitude of other useful tools to deal with\na wide variety of tasks related to polygons. One of these turned out\nto be precisely what I needed: polylabel [@mapbox2018] from the Mapbox suite.\nBecause the details of the library\n[have already been explained elsewhere](https://blog.mapbox.com/a-new-algorithm-for-finding-a-visual-center-of-a-polygon-7c77e6492fbc)\nI will spare you the details, but briefly put it uses quadtree\nbinning to divide the polygon into square bins, pruning away dead-ends.\nIt is inefficient and will, according to the authors, find\na point that is \"guaranteed to be a global optimum within the given precision\".\n\nBecause it appeared to be such a valuable tool for R users, I decided\nto create a wrapper for the c++ header for polylabel and bundle it as a package for R users.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# install.packages(\"polylabelr\")\nlibrary(polylabelr)\n\n# a concave polygon with a hole\nx <- c(0, 6, 3, 9, 10, 12, 4, 0, NA, 2, 5, 3)\ny <- c(0, 0, 1, 3, 1, 5, 3, 0, NA, 1, 2, 2)\n\n# locate the pole of inaccessibility\np <- poi(x, y, precision = 0.01)\n\nplot.new()\nplot.window(\n  range(x, na.rm = TRUE),\n  range(y, na.rm = TRUE),\n  asp = 1\n)\npolypath(x, y, col = \"grey90\", rule = \"evenodd\")\npoints(p, cex = 2, pch = 16)\n```\n\n::: {.cell-output-display}\n![Locating poles of inaccessibility with polylabel.](index_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=336}\n:::\n:::\n\n\nThe package [is availabe on cran](https://CRAN.R-project.org/package=polylabelr),\nthe source code is located at <https://github.com/jolars/polylabelr> and\nis documented at <https://jolars.github.io/polylabelr/>.\n\n## Euler diagrams\n\nTo come back around to where we started at, **polylabelr** has now been\nemployed in the development branch \nof **eulerr** where it is used to quickly and appropriately \nfigure out locations for the labels of the diagram.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(eulerr)\n\nplot(euler(s))\n```\n\n::: {.cell-output-display}\n![An Euler diagram with appropriate label placement.](index_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=336}\n:::\n:::\n\n\n## References\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}